
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	
	Если ЗначениеЗаполнено(объект.Ссылка) Тогда
		
		настройкиОтбораОбработки = справочники.extНастройкиИнтеграцииСВнешнимиИсточниками.получитьОтборыОбработкиИзХранилища(объект.Ссылка);

		Если типЗнч(настройкиОтбораОбработки) = тип("ТаблицаЗначений") Тогда
		
			ПараметрыЗапроса.Загрузить( настройкиОтбораОбработки);
		
		КонецЕсли;
		
		
	КонецЕсли;
	
	
	ХранилищеНастроекКомпоновкиДанных = Объект.Ссылка.ХранилищеНастроекКомпоновкиДанных;
	ХранилищеСхемыКомпоновкиДанных = Объект.Ссылка.ХранилищеСхемыКомпоновкиДанных;

	УстановитьВидимость();
	
	
	
КонецПроцедуры


&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	справочники.extНастройкиИнтеграцииСВнешнимиИсточниками.ПоместитьНастройкиКомпоновщика(ТекущийОбъект,КомпоновщикНастроек, отказ);	
	справочники.extНастройкиИнтеграцииСВнешнимиИсточниками.ПоместитьОтборыОбработкиИзХранилища(ТекущийОбъект,ПараметрыЗапроса.Выгрузить(),отказ);	
	ТекущийОбъект.ХранилищеНастроекКомпоновкиДанных = ХранилищеНастроекКомпоновкиДанных;
	ТекущийОбъект.ХранилищеСхемыКомпоновкиДанных    = ХранилищеСхемыКомпоновкиДанных;

КонецПроцедуры



Процедура УстановитьВидимость()

Если Объект.ВнешняяОбработка.Вид <> перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка Тогда
	ПараметрыЗапроса.Очистить();
КонецЕсли; 
	
	
Если ЗначениеЗаполнено(Объект.ВнешняяОбработка) или значениеЗаполнено(объект.ИмяМодуля) Тогда
	Элементы.РедактироватьСхемуКомпоновкиДанных.Видимость = ложь;

	Если Объект.ВнешняяОбработка.Вид = перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка Тогда
		Элементы.ГруппаПараметрыОбработки.Видимость = истина;
	Иначе
		Элементы.ГруппаПараметрыОбработки.Видимость = ложь;
	КонецЕсли; 
	
	
Иначе
	Элементы.РедактироватьСхемуКомпоновкиДанных.Видимость = Истина;
	Элементы.ГруппаПараметрыОбработки.Видимость = ложь;

КонецЕсли; 	

КонецПроцедуры

&НаКлиенте
Процедура ВнешняяОбработкаПриИзменении(Элемент)
	
	УстановитьВидимость();
	объект.ИмяМодуля = "";
		
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяМодуляПриИзменении(Элемент)
	
	УстановитьВидимость();
	объект.ВнешняяОбработка = неопределено;
	
КонецПроцедуры


&НаКлиенте
Процедура РедактироватьСхемуКомпоновкиДанных(Команда)
	
	// Открыть редактор настроек схемы компоновки данных
	ЗаголовокФормыНастройкиСхемыКомпоновкиДанных = НСтр("ru = 'Настройка схемы компоновки данных для обмена ""%1""'");
	ЗаголовокФормыНастройкиСхемыКомпоновкиДанных = СтрЗаменить(ЗаголовокФормыНастройкиСхемыКомпоновкиДанных, "%1", Объект.Наименование);
	
	Адреса = ПолучитьАдресаСхемыКомпоновкиДанныхВоВременномХранилище();
	
	АдресХранилищаНастройкиКомпоновщика = Неопределено;

	
	ОткрытьФорму("ОбщаяФорма.УпрощеннаяНастройкаСхемыКомпоновкиДанных",
		Новый Структура(
			"НеПомещатьНастройкиВСхемуКомпоновкиДанных,
			|НеРедактироватьСхемуКомпоновкиДанных,
			|НеЗагружатьСхемуКомпоновкиДанныхИзФайла,
			|НеНастраиватьУсловноеОформление,
			|НеНастраиватьВыбор,
			|НеНастраиватьПорядок,
			|УникальныйИдентификатор,
			|АдресСхемыКомпоновкиДанных,
			|АдресНастроекКомпоновкиДанных,
			|Заголовок",
			Истина,
			ложь,
			ложь,
			Истина,
			Истина,
			Истина,
			УникальныйИдентификатор,
			Адреса.СхемаКомпоновкиДанных,
			Адреса.НастройкиКомпоновкиДанных,
			ЗаголовокФормыНастройкиСхемыКомпоновкиДанных),,,,, Новый ОписаниеОповещения("РедактироватьСхемуКомпоновкиДанныхЗавершение", ЭтотОбъект, Новый Структура("Адреса", Адреса)),
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
	
КонецПроцедуры
		
		
&НаКлиенте
Процедура РедактироватьСхемуКомпоновкиДанныхЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Адреса = ДополнительныеПараметры.Адреса;
    
    
	АдресХранилищаНастройкиКомпоновщика = Результат;
	
	Если ЗначениеЗаполнено(АдресХранилищаНастройкиКомпоновщика) Тогда
	    ПрименитьИзмененияКСхемеКомпоновкиДанных(Адреса.СхемаКомпоновкиДанных, АдресХранилищаНастройкиКомпоновщика);
	КонецЕсли;

	Если ЗначениеЗаполнено(Результат) Тогда
	    ЭтаФорма.Модифицированность = истина;		
	
	КонецЕсли; 
	
КонецПроцедуры

		
&НаСервере
Функция ПолучитьАдресаСхемыКомпоновкиДанныхВоВременномХранилище()
	
	Адреса = Новый Структура("СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных");
	
	// Схема
	Если ЗначениеЗаполнено(Объект.СхемаКомпоновкиДанных) ИЛИ ХранилищеСхемыКомпоновкиДанных = Неопределено Тогда
		СхемаИНастройки = Справочники.extНастройкиИнтеграцииСВнешнимиИсточниками.ПолучитьОписаниеИСхемуКомпоновкиДанныхПоИмениМакета(Объект.Ссылка, Объект.СхемаКомпоновкиДанных);
		СхемаКомпоновкиДанных = СхемаИНастройки.СхемаКомпоновкиДанных;
	Иначе
		СхемаКомпоновкиДанных = ХранилищеСхемыКомпоновкиДанных.Получить();
	КонецЕсли;
	
	Если СхемаКомпоновкиДанных = Неопределено Тогда
		
		
	КонецЕсли;
	
	Адреса.СхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	// Настройки
	Настройки = ХранилищеНастроекКомпоновкиДанных.Получить();
	Если ЗначениеЗаполнено(Настройки) Тогда
		Адреса.НастройкиКомпоновкиДанных = ПоместитьВоВременноеХранилище(Настройки, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат Адреса;
	
КонецФункции

&НаСервере
Функция ПолучитьXML(Значение)
	
	Запись = Новый ЗаписьXML();
	Запись.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(Запись, Значение);
	Возврат Запись.Закрыть();
	
КонецФункции


&НаСервере
Функция ПрименитьИзмененияКСхемеКомпоновкиДанных(АдресСхемыКомпоновкиДанныхВХранилище, АдресНастроекКомпоновкиДанных)
	
	Если ЗначениеЗаполнено(Объект.СхемаКомпоновкиДанных) Тогда
		
		СхемаИНастройки = Справочники.extНастройкиИнтеграцииСВнешнимиИсточниками.ПолучитьОписаниеИСхемуКомпоновкиДанныхПоИмениМакета(Объект.Ссылка, Объект.СхемаКомпоновкиДанных);
		
		// Если схема компоновки данных из макета <> полученной из редактора схеме компоновки данных
		Если ПолучитьXML(СхемаИНастройки.СхемаКомпоновкиДанных) <> ПолучитьXML(ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанныхВХранилище)) Тогда
			Объект.СхемаКомпоновкиДанных   = "";
			ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанныхВХранилище));
		КонецЕсли;
		
		// Полученные настройки могут быть равны настройкам по умолчанию схемы.
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		Попытка
			КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаИНастройки.СхемаКомпоновкиДанных));
		Исключение
		КонецПопытки;
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаИНастройки.СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		КомпоновщикНастроек.Восстановить();
		Если ПолучитьXML(КомпоновщикНастроек.ПолучитьНастройки()) <> ПолучитьXML(ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанных)) Тогда
			ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанных));
		Иначе
			ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(Неопределено);
		КонецЕсли;
		
	Иначе
		
		Схема = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанныхВХранилище);
		ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(Схема);
		
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		Попытка
			КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));
		Исключение
		КонецПопытки;
		КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
		КомпоновщикНастроек.Восстановить();
		Если ПолучитьXML(КомпоновщикНастроек.ПолучитьНастройки()) <> ПолучитьXML(ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанных)) Тогда
			ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанных));
		Иначе
			ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(Неопределено);
		КонецЕсли;
		
	КонецЕсли;
	
		
КонецФункции

&НаКлиенте
Процедура ИзменитьИдентификатор(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьИдентификаторОтветПолучен", ЭтаФорма);
	
	ПоказатьВопрос(ОписаниеОповещения, "Будет изменен токен безопасности. Необходимо сообщить новый токен инициатору запроса! Продолжить?", РежимДиалогаВопрос.ДаНет);

	
		
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИдентификаторОтветПолучен(Результат, Параметры)   экспорт

	   Если Результат = КодВозвратаДиалога.Да Тогда
		объект.ИдентификаторНастройки = строка(Новый УникальныйИдентификатор());
		этаФорма.Модифицированность = истина;
	   КонецЕсли;


КонецПроцедуры





