
 
Процедура ПоместитьНастройкиКомпоновщика(ТекущийОбъект, КомпоновщикНастроек, отказ) экспорт
	 
	 //Попытка
	 //
	 //	 ТекущийОбъект.КомпоновщикНастроекХранилище = новый ХранилищеЗначения(КомпоновщикНастроек);

	 //
	 //Исключение
	 //    отказ = истина;
	 //    Сообщить(ОписаниеОшибки());
	 //КонецПопытки;
	 	 
	 
 
 КонецПроцедуры
 
Функция получитьОтборыОбработкиИзХранилища(Ссылка)   экспорт

	  Запрос = новый запрос;
	  Запрос.Текст =  "ВЫБРАТЬ
	                  |	extНастройкиИнтеграцииСВнешнимиИсточниками.ХранилищеНастроекПараметровОбработки
	                  |ИЗ
	                  |	Справочник.extНастройкиИнтеграцииСВнешнимиИсточниками КАК extНастройкиИнтеграцииСВнешнимиИсточниками
	                  |ГДЕ
	                  |	extНастройкиИнтеграцииСВнешнимиИсточниками.Ссылка = &Ссылка" ;
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		
		Выборка = запрос.Выполнить().Выбрать();
		выборка.Следующий();
		
		возврат выборка.ХранилищеНастроекПараметровОбработки.получить();
		
КонецФункции // ()
	
Функция ПоместитьОтборыОбработкиИзХранилища(ТекущийОбъект,ТаблицаОтборов, отказ)   экспорт

	Попытка
	 
	 	 ТекущийОбъект.ХранилищеНастроекПараметровОбработки = новый ХранилищеЗначения(ТаблицаОтборов);

	 
	 Исключение
	     отказ = истина;
	     Сообщить(ОписаниеОшибки());
	 КонецПопытки;

	
	  
КонецФункции // ()
 

// Возвращает структуру с синонимом и схемой компоновки
// данных по имени макета
//
// Параметры:
//	Ссылка - СправочникСсылка.ВидыЦены - ссылка на вид цены
//	ИмяМакета - Строка - имя макета, из которого необходимо получить описание и схему
//
// Возвращаемое значение:
//	Структура - описание и схема компоновки данных
//
Функция ПолучитьОписаниеИСхемуКомпоновкиДанныхПоИмениМакета(Ссылка, ИмяМакета = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Описание",                  "");
	ВозвращаемоеЗначение.Вставить("СхемаКомпоновкиДанных",     Неопределено);
	ВозвращаемоеЗначение.Вставить("НастройкиКомпоновкиДанных", Неопределено);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	extНастройкиИнтеграцииСВнешнимиИсточниками.ХранилищеСхемыКомпоновкиДанных КАК ХранилищеСхемыКомпоновкиДанных,
	|	extНастройкиИнтеграцииСВнешнимиИсточниками.ХранилищеНастроекКомпоновкиДанных КАК ХранилищеНастроекКомпоновкиДанных
	|ИЗ
	|	Справочник.extНастройкиИнтеграцииСВнешнимиИсточниками КАК extНастройкиИнтеграцииСВнешнимиИсточниками
	|ГДЕ
	|	extНастройкиИнтеграцииСВнешнимиИсточниками.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Не ЗначениеЗаполнено(ИмяМакета) Тогда
		
		ВозвращаемоеЗначение.Описание = ИмяМакета;
		Если Выборка.Следующий() Тогда
			
			СхемаКомпоновкиДанных = Выборка.ХранилищеСхемыКомпоновкиДанных.Получить();
			Если СхемаКомпоновкиДанных = Неопределено Тогда
				//ВозвращаемоеЗначение.СхемаКомпоновкиДанных = СформироватьНовуюСхемуКомпоновкиДанных();
				ВозвращаемоеЗначение.СхемаКомпоновкиДанных = Неопределено;
				ВозвращаемоеЗначение.НастройкиКомпоновкиДанных = Неопределено;
			Иначе
				ВозвращаемоеЗначение.СхемаКомпоновкиДанных = СхемаКомпоновкиДанных;
				ВозвращаемоеЗначение.НастройкиКомпоновкиДанных = Выборка.ХранилищеНастроекКомпоновкиДанных.Получить();
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.Описание = Метаданные.НайтиПоТипу(ТипЗнч(Ссылка)).Макеты.Найти(ИмяМакета).Синоним;
		ВозвращаемоеЗначение.СхемаКомпоновкиДанных = Справочники.ВидыЦен.ПолучитьМакет(ИмяМакета);
		Если Выборка.Следующий() Тогда
			ВозвращаемоеЗначение.НастройкиКомпоновкиДанных = Выборка.ХранилищеНастроекКомпоновкиДанных.Получить();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

 
 
 